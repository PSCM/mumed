{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"mount_file_id":"1O2Skl-DV-edqrHDSW_C5-aqZygNJRqeo","authorship_tag":"ABX9TyNsI070PhsGvdMiU3mAHTUn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"Qrnm4OmRkkwS"},"source":["### Separação considerado o Chordino"]},{"cell_type":"code","metadata":{"id":"4HXp9khzoLQf"},"source":[" # Instalar a biblioteca\n","!pip install chord-extractor"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EbSb1sHEovnc","executionInfo":{"status":"ok","timestamp":1666982676228,"user_tz":180,"elapsed":4168,"user":{"displayName":"Paulo Sergio Moreira","userId":"03372049132457586236"}}},"source":["# Importar as bibliotecas necessárias\n","import os\n","import re\n","import pandas as pd\n","from chord_extractor.extractors import Chordino\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.feature_extraction.text import CountVectorizer\n","import warnings\n","warnings.filterwarnings(\"ignore\", message=\"PySoundFile failed\")"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"j6I67iDbKseq","executionInfo":{"status":"ok","timestamp":1666982693449,"user_tz":180,"elapsed":4,"user":{"displayName":"Paulo Sergio Moreira","userId":"03372049132457586236"}}},"source":["# Indicar o local das músicas\n","path = '/content/drive/MyDrive/audio' \n","files = os.listdir(path)\n","files.sort(key=lambda f: int(re.sub('\\D', '', f)))"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"2xsoRoR7owMG","executionInfo":{"status":"ok","timestamp":1666989561433,"user_tz":180,"elapsed":6852096,"user":{"displayName":"Paulo Sergio Moreira","userId":"03372049132457586236"}}},"source":["# Extração de múltiplos arquivos\n","# Fonte dos parâmetros: http://www.isophonics.net/nnls-chroma\n","\n","chordino = Chordino(roll_on=1, use_nnls= True, spectral_shape=0.7,spectral_whitening= 1) \n","\n","chords = []\n","fi = []\n","\n","for f in files: \n"," chord = chordino.extract(path+'/'+f)\n"," fi.append(f)\n"," chords.append(chord)\n","\n","df = pd.DataFrame(zip(fi, chords), columns=['music', 'chords']) # criar data frame (df)"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"_0HFt_qnV15a","colab":{"base_uri":"https://localhost:8080/","height":143},"executionInfo":{"status":"ok","timestamp":1666989803529,"user_tz":180,"elapsed":278,"user":{"displayName":"Paulo Sergio Moreira","userId":"03372049132457586236"}},"outputId":"1b330c32-aee5-4252-d0dd-a6ad8a154b86"},"source":["# Deixar apenas o acordes (remover N)\n","df['chords'] = df['chords'].map(lambda lst: \", \".join(tup[0] for tup in lst))\n","df['chords'] = [(x.strip(', N')) for x in df['chords']]\n","df.head(3)"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         music                             chords\n","0  1_audio.wav                          A7, G, A7\n","1  2_audio.wav                 Em, C, D, Em, C, D\n","2  3_audio.wav  C#, E7, Abm, C#m7, E, Abm, C#m, E"],"text/html":["\n","  <div id=\"df-e5849036-b422-4819-bee1-b2ab9a0143f7\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>music</th>\n","      <th>chords</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1_audio.wav</td>\n","      <td>A7, G, A7</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2_audio.wav</td>\n","      <td>Em, C, D, Em, C, D</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3_audio.wav</td>\n","      <td>C#, E7, Abm, C#m7, E, Abm, C#m, E</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e5849036-b422-4819-bee1-b2ab9a0143f7')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-e5849036-b422-4819-bee1-b2ab9a0143f7 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-e5849036-b422-4819-bee1-b2ab9a0143f7');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["df.to_excel('chords.xlsx')"],"metadata":{"id":"HHY6Gvw9VuRO","executionInfo":{"status":"ok","timestamp":1666989891682,"user_tz":180,"elapsed":2099,"user":{"displayName":"Paulo Sergio Moreira","userId":"03372049132457586236"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["# Construir características"],"metadata":{"id":"wHeJyV-9ZvgU"}},{"cell_type":"code","source":["# Contar acordes\n","df['chord_count'] =  df['chords'].apply(lambda x: len(str(x).split(\" \")))\n","df"],"metadata":{"id":"Ii-Jg-2qUewG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#BOC\n","tokenizer = lambda x: x.replace(\" \", \"\").split(\",\")\n","bow = CountVectorizer(max_features=500, tokenizer = tokenizer, ngram_range=(1,1), lowercase=False)\n","train_bow = bow.fit_transform(df['chords'])\n","boc = pd.DataFrame(bow.transform(df['chords']).toarray(), columns=sorted(bow.vocabulary_.keys()))"],"metadata":{"id":"be0-t8qw6nD-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#TFIDF\n","tokenizer = lambda x: x.replace(\" \", \"\").split(\",\")\n","tfidf = TfidfVectorizer(max_features=500, lowercase=False, tokenizer = tokenizer, ngram_range=(1,1))\n","train_vect = tfidf.fit_transform(df['chords'])\n","tfidf = pd.DataFrame(tfidf.transform(df['chords']).toarray(), columns=sorted(tfidf.vocabulary_.keys()))"],"metadata":{"id":"5xnOvewqjudB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Unir os arquivos\n","df_innerBOC = df.merge(boc, how='inner', left_index=True, right_index=True)\n","df_innerTFIDF = df.merge(tfidf, how='inner', left_index=True, right_index=True)"],"metadata":{"id":"EsZqIFNU_95-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Salvar (ex: csv, xlsx etc)\n","df_innerBOC.to_excel('chordsBOC.xlsx') \n","df_innerTFIDF.to_excel('chordsTFIDF.xlsx') "],"metadata":{"id":"vwLOgn0eBGBq"},"execution_count":null,"outputs":[]}]}